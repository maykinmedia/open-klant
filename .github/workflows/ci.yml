name: ci

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env:
  IMAGE_NAME: maykinmedia/open-klant
  DJANGO_SETTINGS_MODULE: openklant.conf.ci
  DB_PASSWORD: ''
  DB_USER: postgres

jobs:
  # determine changed files to decide if certain jobs can be skipped or not
  changed-files:
    runs-on: ubuntu-latest
    name: Determine changed files
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get changed PY files
        id: changed-py-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            ^src/.+\.py
      - name: Get changed requirements files
        id: changed-requirements
        uses: tj-actions/changed-files@v45
        with:
          files: ^requirements/.+\.txt$

    outputs:
      changed-py-files: ${{ steps.changed-py-files.outputs.any_changed }}
      changed-requirements: ${{ steps.changed-requirements.outputs.any_changed }}

  tests:
    name: Tests (PG ${{ matrix.postgres }})
    runs-on: ubuntu-latest
    needs:
      - changed-files

    # only run tests if source files have changed (e.g. skip for PRs that only update docs)
    if: needs.changed-files.outputs.changed-files == 'true' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    strategy:
      matrix:
        postgres: ['13', '14', '15', '16']

    services:
      postgres:
        image: postgres:${{ matrix.postgres }}
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: pip install -r requirements/dev.txt codecov
      - name: Build frontend
        run: |
          npm ci
          npm run build
      - name: Run tests
        run: |
          python src/manage.py collectstatic --noinput --link
          coverage run src/manage.py test src
        env:
          SECRET_KEY: dummy

      - name: Publish coverage report
        uses: codecov/codecov-action@v3

  check-envvar-docs:
    runs-on: ubuntu-latest
    name: Documentation build

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements/*.txt'
      - name: Install dependencies
        run: pip install -r requirements/ci.txt pytest
      - name: Generate environment variable documentation using OAf and check if it was updated
        run: |
          bin/generate_envvar_docs.sh
          changes=$(git diff docs/installation/config.rst)
          if [ ! -z "$changes" ]; then
              echo $changes
              echo "Please update the environment documentation by running \`bin/generate_envvar_docs.sh\`"
              exit 1
          fi

  store-reusable-workflow-vars:
    name: create values which can be passed through a reusable workflow
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ steps.image-name.outputs.image-name }}
      sphinx-ssl-conf: ${{ steps.sphinx-ssl-conf.outputs.sphinx-ssl-conf }}

    steps:
      - run: echo "image-name=$IMAGE_NAME" >> $GITHUB_OUTPUT
        name: 'Store the docker image name'
        id: image-name

  open-api-ci:
    uses: maykinmedia/open-api-workflows/.github/workflows/ci.yml@initial-setup
    needs:
      - store-reusable-workflow-vars
      - tests
    with:
      main-branch: 'master'
      python-version: '3.11'
      docker-image-name: ${{ needs.store-reusable-workflow-vars.outputs.image-name }}
      repository-owner: 'maykinmedia'
