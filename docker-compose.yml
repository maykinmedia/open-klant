# Inspired by https://docs.docker.com/compose/django/
version: '3'

services:
  db:
    # NOTE: No persistance storage configured.
    # See: https://hub.docker.com/_/postgres/
    image: postgres:17
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    # NOTE: this works for bitnami, not sure if this works for regular
    # postgres image
    volumes:
      - ./docker-init-db.sql:/docker-entrypoint-initdb.d/init_db.sql
      - db:/var/lib/postgresql/data
    networks:
      - open-klant-dev

  web:
    image: maykinmedia/open-klant:latest
    build: &web_build
      context: .
    environment: &web_env
      DJANGO_SETTINGS_MODULE: openklant.conf.docker
      IS_HTTPS: no
      DB_NAME: postgres
      DB_USER: postgres
      DB_HOST: db
      ALLOWED_HOSTS: '*'
      CACHE_DEFAULT: redis:6379/0
      CACHE_AXES: redis:6379/0
      SUBPATH: ${SUBPATH:-/}
      SECRET_KEY: ${SECRET_KEY:-django-insecure-f8s@b*ds4t84-q_2#c0j0506@!l2q6r5_pq5e!vm^_9c*#^66b}
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      DISABLE_2FA: true
      LOG_NOTIFICATIONS_IN_DB: ${LOG_NOTIFICATIONS_IN_DB:-yes}
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; exit(requests.head('http://localhost:8000/admin/').status_code not in [200, 302])"]
      interval: 30s
      timeout: 5s
      retries: 3
      # This should allow for enough time for migrations to run before the max
      # retries have passed. This healthcheck in turn allows other containers
      # to wait for the database migrations.
      start_period: 30s
    volumes: &web_volumes
      - media:/app/media
      - private_media:/app/private_media
      - log:/app/log
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
      web-init:
        condition: service_completed_successfully
    labels:
      client: dev
      target: test
      app: open-klant
      service: web
    networks:
      - open-klant-dev

  web-init:
    build: .
    environment:
      <<: *web_env
      #
      # Django-setup-configuration
      RUN_SETUP_CONFIG: ${RUN_SETUP_CONFIG:-true}

    command: sh -c "/upgrade_check_version.sh &&
                    /setup_configuration.sh"
    volumes:
      - log:/app/log
      - ./docker/setup_configuration:/app/setup_configuration
    depends_on:
      - db
      - redis
    networks:
      - open-klant-dev

  celery:
    image: maykinmedia/open-klant:latest
    build: *web_build
    environment: *web_env
    command: /celery_worker.sh
    healthcheck:
      test: ["CMD", "python", "/app/bin/check_celery_worker_liveness.py"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      web:
        condition: service_healthy
    volumes: *web_volumes
    networks:
      - open-klant-dev

  celery-flower:
    image: maykinmedia/open-klant:latest
    build: *web_build
    environment: *web_env
    command: /celery_flower.sh
    ports:
      - 5555:5555
    depends_on:
      - redis
      - celery
    networks:
      - open-klant-dev

  redis:
    image: redis
    networks:
      - open-klant-dev

volumes:
  db:
  log:
  media:
  private_media:

networks:
  open-klant-dev:
    name: open-klant-dev
